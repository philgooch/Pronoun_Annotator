/*
*  
* Filename: 		org_city_pleonastic.jape
* Author:			Phil Gooch
* Copyright:		Phil Gooch
* Description:		Annotates pleonastic 'it', e.g. it is important to note that ...' so these can be ignored later
*				
*
* Date created:		08/09/2011
* This version:		0.2
* 
* 
* Change history
* ==========================================================================
* Date				Version		Author			Description
* ==========================================================================
* 15/09/2011		0.2			PG				Added 'if' to MatchPleonasticIt1 rule
*/


Phase:	Pleonastic
Input:  Token VG Day Date Time
Options: control = appelt


MACRO: IT
(
	{Token.category == PRP, Token.string ==~ "(?i)it"} |
	{Token.category == "PRP$", Token.string ==~ "(?i)it"}
)

MACRO: DATE
(
	{Day} |
	{Date} |
	{Time}
)

// probaby better to put in a gazetteer
MACRO: WEATHER
(
	{Token.root ==~ "(?i)rain|snow|sun|cloud|wind"}
)

MACRO: RB
(
	{Token.category == RB} |
	{Token.category == RBR} |
	{Token.category == RBS} 
)


MACRO: ADJ
(
	(
		{Token.category == JJ} |
		{Token.category == JJS} |
		{Token.category == JJSS} |
		{Token.category == JJR}
	)
)

MACRO: INTERJECT
(
	{Token.string == ","}
	{Token.category == RB}
	{Token.string == ","}
)

// Ignore dates, times e.g. It is Tuesday, it is 10pm etc
Rule: MatchPleonasticItDate
Priority: 300
(
	(IT)
):it
{VG contains {Token.root == be}}
(INTERJECT)?
(DATE)
-->
:it.${PRONOUN}={type="pleonastic"}


// Ignore weather constructs, e.g. let it rain, it is sunny
Rule: MatchPleonasticItWeather1
Priority: 300
(
	(IT)
):it
(
	(
		{VG contains {Token.root == be}}
		(INTERJECT)?
		(WEATHER)
	) |
	(
		{Token.root == be}
		(INTERJECT)?
		(WEATHER)
	)
)
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItWeather1}


Rule: MatchPleonasticItWeather2
Priority: 300
{Token.string ==~ "(?i)let"}
(
	(IT)
):it
(WEATHER)
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItWeather2}


// Ignore pleonastic it ... whether - e.g. It is unclear whether the patient will regain ...
Rule: MatchPleonasticIt1
Priority: 200
(
	(IT)
):it
{VG contains {Token.root == be}}
(INTERJECT)?
(
	(RB)[0, 2]
	(ADJ)
)[0, 3]
(INTERJECT)?
({VG.tense == Inf})?
{Token.string ==~ "whether|if"}
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticIt1}


// Ignore pleonastic it ... that - e.g. It is important to note that thresholds vary
// It is clear that ...
Rule: MatchPleonasticItThat1
Priority: 200
(
	(IT)
):it
{VG contains {Token.root == be}} // be|do|shall|should|will|might|may ?
(INTERJECT)?
(
	(RB)[0, 2]
	(ADJ)
)[0, 3]
(INTERJECT)?
({VG.tense == Inf})?
(INTERJECT)?
({Token.string ==~ "that"}):it2
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItThat1},
:it2.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItThat1}



Rule: MatchPleonasticItThat2
Priority: 150
(
	(IT)
):it
{VG}
(INTERJECT)?
({Token.string ==~ "that"}):it2
{Token.category == DT}
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItThat2},
:it2.${PRONOUN}={type="pleonastic", rule=MatchPleonasticItThat2}



// Ignore pleonastic that e.g. .. is sure that ... is not that ..
Rule: MatchPleonasticThat
Priority: 200
{VG contains {Token.root == be}} // be|do|shall|should|will|might|may ?
(INTERJECT)?
(
	(RB)[0, 2]
	(ADJ)
)[1, 3]
(INTERJECT)?
({VG.tense == Inf})?
(INTERJECT)?
({Token.string ==~ "that"}):it
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticThat}


/* There is not time .. */
Rule: MatchPleonasticThere
Priority: 200
(
	({Token.string ==~ "there"}):it
	{VG contains {Token.root == be}} 
)
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticThere}



/* it would be difficult to | for */
Rule: MatchPleonasticIt2
Priority: 200
(
	(IT)
):it
{VG.type == MODAL, VG contains {Token.root == be}}
(INTERJECT)?
(
	(RB)[0, 2]
	(ADJ)
)[0, 3]
(INTERJECT)?
({VG.tense == Inf} | {Token.category == IN})
(INTERJECT)?
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticIt2}



/* it continued to be difficult to | for */
Rule: MatchPleonasticIt2a
Priority: 200
(
	(IT)
):it
{VG.type == FVG}
(INTERJECT)?
{VG contains {Token.root == be}}
(INTERJECT)?
(
	(RB)[0, 2]
	(ADJ)
)[0, 3]
(INTERJECT)?
({VG.tense == Inf} | {Token.category == IN})
-->
:it.${PRONOUN}={type="pleonastic", rule=MatchPleonasticIt2a}


// E.g. 'makes it hard to interpret  ... '
Rule: MatchPleonasticIt3
Priority: 200
{VG}
(
	(IT)
):it1
(
	(RB)[0, 2]
	(ADJ)
)[0, 3]
(INTERJECT)?
{VG.tense == Inf}
{Token.kind == word}
-->
:it1.${PRONOUN}={type="pleonastic", rule=MatchPleonasticIt3}